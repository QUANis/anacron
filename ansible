什么是ansible,ansible是2013年推出来的一款IT自动化管理部署工具基于Python研发实现批量操作系统配置
批量程序部署，批量运行命令

ansible可以实现
自动化部署APP
自动化管理配置项
自动化持续交付
自动化云服务器管理

ansible优点
只需要SSH和Python既可使用
ansible功能强大 模块丰富

ansible特性
基于Python语言
--paramiko
--PyYAML(半结构语言）
--Jinja2

软件依赖关系
要求Python
ansible 使用以下模块 都需要安装
-->paramiko
-->PyYAML
-->Jinja2
-->httplib2
-->sixinventory 

主机定义与分组
在/etc/ansible/ansible.cfg 定义主机目录

inventory      = /etc/ansible/hosts

开启登陆无YES或NO
host_key_checking = False

在/etc/ansible/host  文件下定义主机
[组名称]      [nginx]
ip地址        192.168.1.11

查看单个组
ansible nginx --list-hosts

主机定义与分组
[nginx]
192.168.2.0
192.168.2.1

[mysql]
192.168.1.0
192.168.1.1

 定义组
[ngimysq:children]
nginx
mysql

快阶定义
[nginx]
192.168.2.[1:20]    1到20的主机

自定义主机定义及配置文件
/root/nginx/ansible.cfg
位置文件自定义名
[nginx]inventory = nginx
host_key_chrcking = False

在/root/nginx/nginx
定义主机集群
[nginx]
192.168.2.0
192.168.2.1

[mysql]
192.168.1.0
192.168.1.1

ansible命令基础
- -M 指定模块路径
- -m 使用模块，默认command模块
- -a or --args模块参数
- -i inventory文件路径，或可执行脚本
- -k 使用交互式登陆密码
- -e 定义变量
- -v 详细信息

ansible命令基础
列出要执行的主机
ansible all --list-hosts

批量检测主机及命令
ansible all -m ping -k

批量部署SSH公钥
ansible all -m authorized_key -a "user=root exclusive=true manage_dir=true key='$(</root/.ssh/id_rsa.pub)'" -k

模块手册
ansible-doc -l   查看所以模块

command模块可以执行linux的基本命令及查看

查看日期时间
ansible all -m command -a 'date +%F_%T'

查看所以机器负载
ansible all -m command -a 'uptime‘

command模块注意事项不支持字符
如  < > | &

shell | raw 模块

command   默认模块
raw       适用性广，不支持cd 
shell     万能模块

可以支持字符
添加用户
ansible all -m shell -a 'useradd  test'
查询
ansible all -m shell -a 'id test'

给test 设置密码
ansible all -m shell -a 'echo 123 | passwd --stdin tets‘

判断如果有test就不创建li4
vim /root/user.sh
#!/bin/bash
if ! $(id test &>/dev/null);then
      useradd li4
      echo 123456 | passwd --stdin li4
fi

script模块
可以在本的执行脚本
ansible all -m script -a '/root/user.sh'

copy模块
bachup：覆盖前先备份原文件，备份文件含有时间信息有选项YES|NO
force：若目标主机含有文件但内容不同如果没有为YES则强制覆盖设为NO则只有当目标主机的目标位置不存在该文件是才复制 默认为YES
复制文件
ansible all -m copy -a 'src=/root/alog  dest=/root/a.log'
复制目录
ansible all -m copy -a 'src=/root/a   dest=/root'

适用于文件文件一样的
ansible all -m copy -a 'src=/etc/resolv.conf  dest=/etc/resolv.confv.conf'
ansible all -m shell -a 'cat /etc/resolv.conf'
作行修改修以行
lineinfile行编辑器模块
path目的文件：我要修改哪个文件 如/etc/resolv.conf
regexp:正者表达事  如".*(\.114){3}“ 修改114配置出现3次
line:将这行修改为 如"nameserver 8.8.8.8" 
示范
ansible all -m lineinfile -a '
path="/ect/resolv.cong" 
regexp="nameserver 114.114.114.144"
line="nameserver 8.8.8.8"'

ansible all -m lineinfile -a 'path="/etc/resolv.conf" regexp="nameserver 114.114.114.144" line="nameserver 8.8.8.8"'
查看
ansible all -m shell -a 'cat /etc/resolv.conf'

 
replace条件修改
path="/etc/resoiv.conf"
regexp="8.8.8.8"
replace="4.4.4.4"
ansible all -m replace -a 'path="/etc/resolv.conf" regexp="8.8.8.8" replace="4.4.4.4"'
ansible all -m shell -a 'cat /etc/resolv.conf'

yum模块包管理
使用yum包管理来管理软件包
name:要进行操作的软件包名字 也可以本地的RPM包路径
state 状态（present absent latest)




帮助手册
ansible-doc yum

(`present' or `installed', `latest'),
          正常安装       安装最新
(`absent' or `removed')
    卸载          卸载
    

删除软件包
ansible all -m yum -a 'name=httpd state=removed'
安装软件包
ansible all -m yun -a 'name=httpd state=installed'

service模块
name:必须服务名称
enabled 是否开机起的yes|no
state 对服务执行（启动        停止     重起         重新加载）
               （started  stopped   restarted   reloaded)
ansible all -m yum -a 'name="httpd" enabled="yes" state="started"


写一个shell 脚本 用ansible调用
写playbooy 语法
YAML基础语法
- YAML的结构通过空格来展示
- 数组使用"_"来表示
- 健值对使用":"来表示
- YAML使用一个固定的缩进风格来表示数据层级结构关系
- 一般每个缩进级别有两个以上空格组成
- #表示注释
- 注意不要使用TAB
- 同一层缩进必须对其

为什么要使用playbook
- 执行一些简单的任务，使用ad-hoc命令可以方便的解决问题
- 绿色代表执行成功
- ***代表系统为发生改变
- 红色代表执行失败
- play中hosts=主机集合
- play中tasks=命令的集合执行命令是病发

vim ping.yml   # ping模块
---
- hosts: all   结合主机
  remote_user: root   用root执行
  tasks:
    -ping       模块 
ansible-playbook ping.yml 执行命令
ansible-playbook -f 5 ping.yml   #-f 5 执行5次

创建用户
vim user.yml
---
- hosts: all
  tasks:
    - name: 注释useradd test用户
    - user:
        name: test
    - name:注释修改密码
    - shell: echo 123|passwd --stdin test
    
playbook
安装Apache并修改端口为8080
修改ServerName配置 执行apachectl -t命令不报错
设置默认主页hello world
启动服务并设置开机自动启

帮助文档
ansible-doc yum

vim /root/httpd.yml
---
- hosts: web
  remote_user: root
  tasks:
    - name: install the latest version of Apache
      yum:
        name: httpd
        state: latest
    - lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^Listen '
        insertafter: '^#Listen '
        line: 'Listen 8080'
    - lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^#ServerName'
        line: 'ServerName localhost'
    - copy:
        src: index.html                   当前目录下创建index.html
        dest: /var/www/html/
        owner: apache
        group: apache
        mode: 0644
    - service:
        name: httpd
        state: started
        enabled: yes

变量
vim /root/bianlan.yml
---
- hosts: all
  remote_user: root
  vars:
    username: lisi
  tasks:
    - name: add user "{{username}}"
      user:
        name: "{{username}}"
    - shell: echo 123|passwd --stdin "{{username}}"

ansible-playbook bianlan.yml
自定义参数
ansible-playbook -e '{"username": "lis4"}' bianlan.yml  #定义的参数改变不了配置文件

过滤器密码加密
---
- hosts: all
  remote_user: root
  vars:
    username: lisi
  tasks:
    - name: add user "{{username}}"
      user:
        name: "{{username}}"
        passwoed: "{{'123'|password_hash('sha512')}}"









